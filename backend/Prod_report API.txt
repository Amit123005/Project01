@app.route('/api/prod_report', methods=['POST', 'GET'])
def get_prod_report():
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    shift = request.args.get('shift')
    
    print("Data is ", start_date, "end Date is", end_date, "shift is ", shift)
    if not start_date or not end_date:
        return jsonify({"error": "Missing start_date or end_date"}), 400

    start_datetime = f"{start_date} 00:00:00"
    end_datetime = f"{end_date} 23:59:59"

    query = """
        SELECT 
            DATE(timestamp) as date,
            plan_id as plan_id,
            part_name as Part_name,
            model as Model, 
            MAX(availability) as Availability,
            MAX(performance) as Performance,
            MAX(quality_rate) as Quality_Rate,
            MAX(oee) as OEE,
            MAX(line_rej) as Line_rej,
            MAX(startup_rej) as Startup_rej,
            MAX(cutter1_count) as count1,
            MAX(cutter2_count) as count2,
            MAX(part_wt) as part_wt
        FROM L8_Running_Status
            WHERE timestamp BETWEEN %s AND %s
    """
    
    if shift:
        query += " AND (shift = %s OR shift = 'NA')"
    
    query += """
            GROUP BY DATE(timestamp), part_name, model, plan_id
            """
    params = [start_datetime, end_datetime]
    if shift:
        params.append(shift)
    
    cur = mysql.connection.cursor()
    cur.execute(query, params)
    data = cur.fetchall()
    cur.close()

    if not data:
        print("No data found")
        return jsonify({"error": "No data found"}), 404

    result = []
    for row in data:
        consumption = (
            row[8] + 
            row[9] / 1000 + 
            (row[10] + row[11]) * row[12] / 1000 - 
            row[9] / 1000 
        )
        consumption= f"{consumption:.2f}"
        Availability= f"{row[4]:.2f}"
        Performance= f"{row[5]:.2f}"
        Quality_Rate= f"{row[6]:.2f}"
        OEE= f"{row[7]:.2f}"
        Startup= f"{row[8]:.2f}"
        Line= f"{row[9]:.2f}"
        
        result.append({
            "Date": row[0].strftime("%Y-%m-%d"),
            "Plan ID": row[1],
            "Part Name": row[2],
            "Model": row[3],
            "Availability": Availability,
            "Performance": Performance,
            "Quality Rate": Quality_Rate,
            "OEE":OEE,
            "Startup Rejection": Startup,
            "Line Rejection": Line,
            "Consumption": consumption,
        })
    return jsonify(result)